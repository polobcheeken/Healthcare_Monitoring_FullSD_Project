@page "/staffs/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<h3 class="card-title">Healthcare Staffs</h3>
<br />

<a href="/staffs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Staff
</a>
<br />
<br />

@if (Staffs == null)
{
    <div class="alert alert-info">Loading Staffs...</div>
}
else
{
    <table class="table table-responsive" id="staffsTable">
        <thead>
            <tr>
                <th>Staff Fullname</th>
                <th>Staff Username</th>
                <th>Staff Gender</th>
                <th>Staff Contact Number</th>
                <th>Staff Email Address</th>
                <th>Staff Hospital Posted</th>
                <th>Actions</th>
                
                
            </tr>
        </thead>
        <tbody>
            @foreach (var staff in Staffs)
            {
                <tr>
                    <td>@staff.FirstName @staff.LastName</td>
                    <td>@staff.Username</td>
                    <td>@staff.Gender</td>
                    <td>@staff.ContactNo</td>
                    <td>@staff.EmailAddress</td>
                    <td>@staff.Hospital.Name</td>
                    

                    <td>
                        <a href="/staffs/view/@staff.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/staffs/edit/@staff.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(staff.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Staff>? Staffs;
    private DateTime nullDT = new DateTime(1, 1, 1, 0, 0, 0);

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

    async Task Delete(int staffId)
    {
        if (Staffs != null)
        {
            var staff = Staffs.First(q => q.Id == staffId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {staff.FirstName}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#staffsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTableDispose", "#staffsTable");
    }
}