@page "/prescriptions/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<h3 class="card-title">Healthcare Consultation Prescriptions</h3>
<br />
<BackToList Target="consultations" />
@*
<a href="/prescriptions/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Prescription
</a>
*@
<br />
<br />
@if (Prescriptions == null)
{
    <div class="alert alert-info">Loading Prescriptions...</div>
}
else
{
    <table class="table table-responsive" id="prescriptionsTable">
        <thead>
            <tr>
                <th>Description</th>
                <th>View Prescription Items</th>
                <th>Actions</th>


            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@Prescription.Description</td>
                <td>
                    <a href="/prescriptionitems/@Prescription.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                </td>

                <td>
                    <a href="/prescriptions/view/@Prescription.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/prescriptions/edit/@Prescription.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    [Parameter] public int id { get; set; }
    private List<Prescription>? Prescriptions;
    public Prescription? Prescription;
    private DateTime nullDT = new DateTime(1, 1, 1, 0, 0, 0);

    protected async override Task OnInitializedAsync()
    {
        Prescriptions = await _client.GetFromJsonAsync<List<Prescription>>($"{Endpoints.PrescriptionsEndpoint}");
        Prescription = Prescriptions[id];
    }

    async Task Delete(int prescriptionId)
    {
        if (Prescriptions != null)
        {
            var prescription = Prescriptions.First(q => q.Id == prescriptionId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {prescription.Id}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.PrescriptionsEndpoint}/{prescriptionId}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#prescriptionsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTableDispose", "#prescriptionsTable");
    }
}