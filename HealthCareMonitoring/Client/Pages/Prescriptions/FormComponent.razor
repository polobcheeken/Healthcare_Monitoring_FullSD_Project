@inject HttpClient _client

<EditForm Model="@prescription" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        
        <div class="form-group">
            <label>Consultation: </label>
            <div>
                <InputSelect @bind-Value="prescription.ConsultationId" class="form-control">
                    <option value="">-- Select Hospital --</option>
                    @if (Consultations != null)
                    {
                        foreach (var consultation in Consultations)
                        {
                            <option value="@consultation.Id">@consultation.Description</option> //no proper anchor
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => prescription.ConsultationId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Prescription : </label>
            <div>
                <InputText @bind-Value="@prescription.Description" class="form-control" />
                <ValidationMessage For="@(() => prescription.Description)" />
            </div>
        </div>

        <br/>
        <br/>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="prescriptions" />

</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Prescription prescription { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Consultation>? Consultations;
    

    protected async override Task OnInitializedAsync()
    {
        Consultations = await _client.GetFromJsonAsync<List<Consultation>>($"{Endpoints.ConsultationsEndpoint}");
    }
}